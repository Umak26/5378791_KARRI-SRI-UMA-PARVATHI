Plus Minus 

void plusMinus(int arr_count, int* arr) {
    int positive = 0, negative = 0, zero = 0;

    for (int i = 0; i < arr_count; i++) {
        if (arr[i] > 0)
            positive++;
        else if (arr[i] < 0)
            negative++;
        else
            zero++;
    }

    printf("%.6f\n", (float)positive / arr_count);
    printf("%.6f\n", (float)negative / arr_count);
    printf("%.6f\n", (float)zero / arr_count);
}

Mini-Max Sum

void miniMaxSum(int arr_count, int* arr) {
    long min = LONG_MAX;
    long max = LONG_MIN;
    long total = 0;

    for (int i = 0; i < arr_count; i++) {
        total += arr[i];
        if (arr[i] < min) min = arr[i];
        if (arr[i] > max) max = arr[i];
    }

    printf("%ld %ld\n", total - max, total - min);
}

Time Conversion

char* timeConversion(char* s) {
    static char result[9];  // HH:MM:SS\0
    int hour, minute, second;
    char period[3];

    // Parse the input string
    sscanf(s, "%2d:%2d:%2d%2s", &hour, &minute, &second, period);

    // Convert to 24-hour format
    if (strcmp(period, "AM") == 0 && hour == 12) {
        hour = 0;
    } else if (strcmp(period, "PM") == 0 && hour != 12) {
        hour += 12;
    }

    // Format output
    sprintf(result, "%02d:%02d:%02d", hour, minute, second);
    return result;
}

Sparse Arrays

int* matchingStrings(int strings_count, char** strings, int queries_count, char** queries, int* result_count) {
    int* results = malloc(queries_count * sizeof(int));  // allocate result array
    *result_count = queries_count;  // set result count

    for (int i = 0; i < queries_count; i++) {
        results[i] = 0;  // initialize count to 0

        for (int j = 0; j < strings_count; j++) {
            if (strcmp(queries[i], strings[j]) == 0) {
                results[i]++;
            }
        }
    }

    return results;
}

Lonely Integer

int lonelyinteger(int a_count, int* a) {
    int result = 0;
    for (int i = 0; i < a_count; i++) {
        result ^= a[i];
    }
    return result;
}


Flipping bits

long flippingBits(long n) {
    return n ^ 0xFFFFFFFF;
}



